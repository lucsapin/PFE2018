function value = hampathget(options, name)
% hampathget -- Gets hampath package options.
%
% Usage
%  value = hampathget(options, name)
%
% Inputs
%  options - struct, options
%  name    - string, option name
%
% Outputs
%  value   - any, option value
%
% See help hampathset for the description of the different options
%
if(nargin==2 & strcmp(name,'getoptionsformex')==1)

    %On renvoie les options pour les donner aux mex-files
    value.dw  = [   options.MaxSf               ...
                    options.MaxSfunNorm         ...
                    options.MaxStepSizeOde      ...
                    options.MaxStepSizeOdeHam   ...
                    options.MaxStepSizeHomPar   ...
                    options.TolOdeAbs           ...
                    options.TolOdeRel           ...
                    options.TolOdeHamAbs        ...
                    options.TolOdeHamRel        ...
                    options.TolDenseHamEnd      ...
                    options.TolDenseHamX        ...
                    options.TolX                ];

    value.iw  = [   options.DispIter            ...
                    options.MaxFEval            ...
                    options.MaxIterCorrection   ...
                    options.MaxStepsOde         ...
                    options.MaxStepsOdeHam      ...
                    options.StopAtTurningPoint  ];

    value.lsw = [   length(options.Derivative)      ...
                    length(options.Display)         ...
                    length(options.DoSavePath)      ...
                    length(options.IrkInit)         ...
                    length(options.IrkSolver)       ...
                    length(options.ODE)             ...
                    length(options.ODEHam)          ...
                    length(options.SolverMethod)    ];

    value.sw  = strcat(     options.Derivative,     ...
                            options.Display,        ...
                            options.DoSavePath,     ...
                            options.IrkInit,        ...
                            options.IrkSolver,      ...
                            options.ODE,            ...
                            options.ODEHam,         ...
                            options.SolverMethod    );

else

    if(nargout~=1)
        error('wrong number of outputs: try help');
    end

    if(nargin==1) % Utile pour la version Matlab / Octave

        value = [   options.Derivative                  '\n'    ...
                    int2str(options.DispIter)           '\n'    ...
                    options.Display                     '\n'    ...
                    options.DoSavePath                  '\n'    ...
                    options.IrkInit                     '\n'    ...
                    options.IrkSolver                   '\n'    ...
                    int2str(options.MaxFEval)           '\n'    ...
                    int2str(options.MaxIterCorrection)  '\n'    ...
                    num2str(options.MaxSf)              '\n'    ...
                    num2str(options.MaxSfunNorm)        '\n'    ...
                    int2str(options.MaxStepsOde)        '\n'    ...
                    int2str(options.MaxStepsOdeHam)     '\n'    ...
                    num2str(options.MaxStepSizeOde)     '\n'    ...
                    num2str(options.MaxStepSizeOdeHam)  '\n'    ...
                    num2str(options.MaxStepSizeHomPar)  '\n'    ...
                    options.ODE                         '\n'    ...
                    options.ODEHam                      '\n'    ...
                    options.SolverMethod                '\n'    ...
                    int2str(options.StopAtTurningPoint) '\n'    ...
                    num2str(options.TolOdeAbs)          '\n'    ...
                    num2str(options.TolOdeRel)          '\n'    ...
                    num2str(options.TolOdeHamAbs)       '\n'    ...
                    num2str(options.TolOdeHamRel)       '\n'    ...
                    num2str(options.TolDenseHamEnd)     '\n'    ...
                    num2str(options.TolDenseHamX)       '\n'    ...
                    num2str(options.TolX)               '\n' ];

    else

        switch lower(name)
            case 'derivative' 
                value = options.Derivative;
            case 'dispiter' 
                value = options.DispIter;
            case 'display' 
                value = options.Display;
            case 'dosavepath' 
                value = options.DoSavePath;
            case 'irkinit'
                value = options.IrkInit;
            case 'irksolver'
                value = options.IrkSolver;
            case 'maxfeval' 
                value = options.MaxFEval;
            case 'maxitercorrection' 
                value = options.MaxIterCorrection;
            case 'maxsf' 
                value = options.MaxSf;
            case 'maxsfunnorm' 
                value = options.MaxSfunNorm;
            case 'maxstepsode' 
                value = options.MaxStepsOde;
            case 'maxstepsodeham' 
                value = options.MaxStepsOdeHam;
            case 'maxstepsizeode' 
                value = options.MaxStepSizeOde;
            case 'maxstepsizeodeham' 
                value = options.MaxStepSizeOdeHam;
            case 'maxstepsizehompar'
                value = options.MaxStepSizeHomPar;
            case 'ode' 
                value = options.ODE;
            case 'odeham' 
                value = options.ODEHam;
            case 'solvermethod' 
                value = options.SolverMethod;
            case 'stopatturningpoint' 
                value = options.StopAtTurningPoint;
            case 'tolodeabs' 
                value = options.TolOdeAbs;
            case 'toloderel' 
                value = options.TolOdeRel;
            case 'tolodehamabs' 
                value = options.TolOdeHamAbs;
            case 'tolodehamrel' 
                value = options.TolOdeHamRel;
            case 'toldensehamend' 
                value = options.TolDenseHamEnd;
            case 'toldensehamx' 
                value = options.TolDenseHamX;
            case 'tolx'
                value = options.TolX;
        otherwise
            error(sprintf('Unrecognized property name ''%s''.', name));
        end;

    end;

end;
%% -----------------------------------------------------------------------------
%%
%% Copyright 2016, Olivier Cots.
%%
%% This file is part of HamPath.
%%
%% HamPath is free software: you can redistribute it and/or modify
%% it under the terms of the GNU Lesser General Public License as published by
%% the Free Software Foundation, either version 3 of the License, or
%% (at your option) any later version.
%%
%% HamPath is distributed in the hope that it will be useful,
%% but WITHOUT ANY WARRANTY; without even the implied warranty of
%% MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%% GNU Lesser General Public License for more details.
%%
%% You should have received a copy of the GNU Lesser General Public License
%% along with HamPath. If not, see <http://www.gnu.org/licenses/>.
%%
%% -----------------------------------------------------------------------------
%%
