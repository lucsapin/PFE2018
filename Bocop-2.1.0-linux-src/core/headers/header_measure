// This code is published under the Eclipse Public License
// Header included at the beginning of the function defined in the problem folder
// Daphne Giorgi, Stephan Maindrault, Pierre Martinon
// Inria Saclay and Cmap Ecole Polytechnique
// 2013-2017
#ifndef MEASURE_H
#define MEASURE_H

#include <iostream>
#include <cmath>
#include "dependencies.hpp"
using namespace std;


// Function for the measure of the problem
// phi(tk, y(tk), u(tk), z(tk), p(tk))

// The following are the input and output available variables of your
// optimal control problem.
// The equations of your problem have to be written in C++ code
// Remember that the vectors numbering starts from 0
// (ex: the first component of the vector state is state[0])

// Input :
// dataSetIndex : index of the observation file which the measure refers to
// dim_time_observation : number of the observation times
// time : current time (t)
// dim_state : dimension of vector of state variables
// state : vector of state variables
// dim_constants : dimension of vector of constants
// constants : vector of constants
// dim_optimvars : dimension of vector of optimization parameters
// optimvars : vector of optimization parameters 
// dim_measures : dimension of vector of observations and of vector of measures
// observations : vector of the observations for file dataSetIndex, at current time

// Output :
// measures : vector giving the theoretical measure, this vector has the
// same dimension of the vector of observations

template<class Tdouble> 
void measure( const int dataSetIndex,
              const int dim_time_observation,
              //const Tdouble time,
              const double observation_time,
              const int dim_state,
              const Tdouble* state,
              const int dim_optimvars,
              const Tdouble* optimvars,
              const int dim_constants,
              const double* constants,
              const int dim_measures,
              const double* observations,
              Tdouble* measures)

#endif

